Se usa Vite -> npm create vite@latest
Luego se hace npm install, y por ultimo para levantar el comando npm run dev

En intro-react se instalo -> npm i prop-types
----------------------------------------------
En 04-cart-app ->  npm i react-router-dom

si en una llamada por ejemplo -> addUser={() => addUser()}, ahi no tenemos "argumentos" entonces podria 
ponerse addUser={addUser}
cuando hacemos onClick de un button deberia usarse con parentesis -> onClick={() => removeUser()}

----------------------------------------------
En 05-users-app -> npm install sweetalert2 sweetalert2-react-content
https://sweetalert2.github.io/

Con sweetalert2-react-content, nos permite manejar el modal usando react (en este caso no lo usamos).

En la carpeta pages ponemos los componentes contenedores. En auth los componentes de login.
En la carpeta services se trata de poner funciones tipo "helpers", para que puedan ser reutilizadas en la app.

Context:
Context es un componente proveedor que se encuentra arriba en el arbol de componentes y permite compartir el estado actualizado
a sus componentes hijos.Utiliza reducers. 
Mediante el hook useContext podemos acceder al estado actualizado. 

Pasos para crear un context:
1-Creamos un context -> en mi ejemplo llamado UserContext donde usamos el createContext.
2-Creamos provider -> en mi ejemplo llamado UserProvider que utiliza los hooks que definimos y se pasaran sus cosas a los hijos mediante el value.
3-Con el tag UserProvider engrapamos todos los componentes hijos, en este caso sera en UsersRoutes (que es el componente de mayor jerarquia).
4-A partir de ahora todos los componentes engrapados tendran acceso a lo que habiamos puesto en el "value" del UserProvider.
5-La manera de acceder es mediante el hook useContext pasandole el context creado en este caso -> useContext(UserContext).

----------------------------------------------
Redux: es un patron de arquitectura que utiliza reducers para manejar el estado de nuestra app.
Usamos -> npm install @reduxjs/toolkit npm install react-redux

Pasos para crear un redux:
1-Creamos un store(unica fuente de verdad), y usamos Provider de react-redux para compartir el store.
2-Se crean slices
3-Agregamos los slices al store
4-Usamos useSelector para obtener cosas del estado de nuestro slice (segun el nombre del slice, "auth" o "users").

----------------------------------------------
Amazon AWS

Los servicios que se usan son:
Amazon RDS -> para alojar la BD
EC2 -> para back
S3 -> para front
